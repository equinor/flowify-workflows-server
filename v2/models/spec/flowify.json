{
  "openapi": "3.0.2",
  "info": {
    "description": "This is the Flowify V2 Rest API",
    "version": "2",
    "title": "Flowify V2 API"
  },
  "servers": [
    {
      "url": "https://flowify.aurora.equinor.com/api/v2"
    }
  ],
  "tags": [
    {
      "name": "Components",
      "description": "Create, edit and read components. Components glue together bricks into workflows."
    }
  ],
  "paths": {
    "/userinfo/": {
      "get": {
        "summary": "Query info for authenticated user",
        "operationId": "listUserinfo",
        "tags": ["Userinfo"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "userinfo.schema.json"
                }
              }
            }
          },
          "401": {
            "description": "The request does not carry required authentication",
            "$ref": "#/components/responses/401"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workspaces/": {
      "get": {
        "summary": "Query info for available workspaces",
        "operationId": "listWorkspaces",
        "tags": ["Workspace"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "workspace.schema.json"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request does not carry required authentication",
            "$ref": "#/components/responses/401"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/secrets/{workspace}/": {
      "get": {
        "summary": "Query available secrets for a workspace",
        "operationId": "listSecrets",
        "tags": ["Secrets"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request does not carry required authentication",
            "$ref": "#/components/responses/401"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/secrets/{workspace}/{key}": {
      "put": {
        "summary": "Create or update a secret with key from workspace",
        "description": "Note that the content of the request must align with the 'key' path parameter",
        "operationId": "putSecret",
        "tags": ["Secrets"],
        "requestBody": {
          "description": "The secret to create or update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "secret.schema.json"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Secret created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "secret.schema.json"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "Location of the newly created secret",
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "example": "/secrets/workspace/my-secret"
              }
            }
          },
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "description": "The request does not carry required authentication",
            "$ref": "#/components/responses/401"
          },
          "403": {
            "description": "The request is malformed",
            "$ref": "#/components/responses/403"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Delete a secret with key from workspace",
        "operationId": "deleteSecret",
        "tags": ["Secrets"],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "description": "The request does not carry required authentication",
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "The secret is not found",
            "$ref": "#/components/responses/404"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/volumes/{workspace}/": {
      "get": {
        "summary": "Query available volumes for a workspace",
        "operationId": "listVolumes",
        "tags": ["Volumes"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "volumelist.schema.json"
                }
              }
            }
          },
          "401": {
            "description": "The request does not carry required authentication",
            "$ref": "#/components/responses/401"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Post a new volume in a workspace",
        "operationId": "postVolume",
        "tags": ["Volumes"],
        "requestBody": {
          "description": "The volume to post",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "volume.schema.json"
              }
            }
          }
        },
        "201": {
          "$ref": "#/components/responses/201"
        },
        "400": {
          "$ref": "#/components/responses/400"
        },
        "401": {
          "$ref": "#/components/responses/401"
        },
        "default": {
          "$ref": "#/components/responses/500"
        }
      }
    },
    "/volumes/{workspace}/{objectId}": {
      "get": {
        "summary": "Get a volume from a workspace",
        "operationId": "getVolume",
        "tags": ["Volumes"],
        "parameters": [
          {
            "$ref": "cref.schema.json"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "volume.schema.json"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "summary": "Update a volume",
        "description": "Update the volume",
        "operationId": "putVolume",
        "tags": ["Volumes"],
        "parameters": [
          {
            "$ref": "cref.schema.json"
          }
        ],
        "requestBody": {
          "description": "The volume to put",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "volume.schema.json"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Delete a volume",
        "description": "Delete the volume",
        "operationId": "deleteVolume",
        "tags": ["Volumes"],
        "parameters": [
          {
            "$ref": "cref.schema.json"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/components/": {
      "get": {
        "summary": "Query metadata for all components",
        "operationId": "listComponents",
        "tags": ["Components"],
        "parameters": [
          { "$ref": "#/components/parameters/PaginationLimit" },
          { "$ref": "#/components/parameters/PaginationOffset" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Sort" }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "metadatalist.schema.json"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Create a new stored component from contents and assign uid",
        "tags": ["Components"],
        "operationId": "postComponent",
        "requestBody": {
          "description": "The component to store",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "componentpostrequest.schema.json"
              }
            }
          }
        },

        "responses": {
          "201": {
            "description": "Created/stored object can be queried",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "component.schema.json"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "Location of the newly created component",
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "example": "/components/8aec4412-5049-4e14-97ee-cd007b2a0ad1"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/components/{objectId}": {
      "get": {
        "summary": "Get a component",
        "description": "Get the model description of the requested component object",
        "operationId": "getComponent",
        "tags": ["Components"],
        "parameters": [
          {
            "$ref": "cref.schema.json"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "component.schema.json"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "summary": "Update a component",
        "description": "Create new version of existing component object",
        "operationId": "putComponent",
        "tags": ["Components"],
        "parameters": [
          {
            "$ref": "cref.schema.json"
          }
        ],
        "requestBody": {
          "description": "The component to put",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "componentpostrequest.schema.json"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "summary": "Save a component",
        "description": "Save changes of existing component object. Only latest version of component can be saved.",
        "operationId": "patchComponent",
        "tags": ["Components"],
        "parameters": [
          {
            "$ref": "cref.schema.json"
          }
        ],
        "requestBody": {
          "description": "The component to save. Timestamp and modifiedBy fields are overwritten",
          "required": true,
          "content": {
            "application/json":{
              "schema": {
                "$ref": "componentpostrequest.schema.json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK. Object saved, new object version in response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "component.schema.json"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/components/{objectId}/{version}": {
      "get": {
        "summary": "Get a specific version of component",
        "description": "Get the model description of the requested version of component object",
        "operationId": "getComponent",
        "tags": ["Components"],
        "parameters": [
          {
            "$ref": "cref.schema.json"
          },
          {
            "in": "path",
            "required": true,
            "name": "version",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "component.schema.json"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Delete a component",
        "description": "Delete a specific version of component object",
        "operationId": "deleteComponent",
        "tags": ["Components"],
        "parameters": [
          {
            "$ref": "cref.schema.json"
          },
          {
            "in": "path",
            "required": true,
            "name": "version",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workflows/": {
      "get": {
        "summary": "Query metadata for all workflows",
        "operationId": "listWorkflows",
        "tags": ["Workflows"],
        "parameters": [
          { "$ref": "#/components/parameters/PaginationLimit" },
          { "$ref": "#/components/parameters/PaginationOffset" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Sort" }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "metadataworkspacelist.schema.json"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Create a new stored workflow from contents and assign uid",
        "tags": ["Workflows"],
        "operationId": "postWorkflow",
        "requestBody": {
          "description": "The workflow to store",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "workflowpostrequest.schema.json"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created/stored object can be queried",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "workflow.schema.json"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "Location of the newly created workflow",
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "example": "/workflows/8aec4412-5049-4e14-97ee-cd007b2a0ad1"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workflows/{objectId}": {
      "get": {
        "summary": "Get a workflow",
        "description": "Get the model description of the requested workflow object",
        "operationId": "getWorkflow",
        "tags": ["Workflows"],
        "parameters": [
          {
            "$ref": "cref.schema.json"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "workflow.schema.json"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "summary": "Update a workflow",
        "description": "Create new version of existing workflow object",
        "operationId": "putWorkflow",
        "tags": ["Workflows"],
        "parameters": [
          {
            "$ref": "cref.schema.json"
          }
        ],
        "requestBody": {
          "description": "The workflow to put",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "workflowpostrequest.schema.json"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "summary": "Save a workflow",
        "description": "Save changes of existing workflow object. Only latest version of workflow can be saved.",
        "operationId": "patchWorkflow",
        "tags": ["Workflows"],
        "parameters": [
          {
            "$ref": "cref.schema.json"
          }
        ],
        "requestBody": {
          "description": "The workflow to save. Timestamp and modifiedBy fields are overwritten",
          "required": true,
          "content": {
            "application/json":{
              "schema": {
                "$ref": "workflowpostrequest.schema.json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK. Object saved, new object version in response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "component.schema.json"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/workflows/{objectId}/{version}": {
      "get": {
        "summary": "Get a specific version of workflow",
        "description": "Get the model description of the requested version of workflow object",
        "operationId": "getWorkflow",
        "tags": ["Workflows"],
        "parameters": [
          {
            "$ref": "cref.schema.json"
          },
          {
            "in": "path",
            "required": true,
            "name": "version",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "workflow.schema.json"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Delete a workflow",
        "description": "Delete a specific version of workflow object",
        "operationId": "deleteWorkflow",
        "tags": ["Workflows"],
        "parameters": [
          {
            "$ref": "cref.schema.json"
          },
          {
            "in": "path",
            "required": true,
            "name": "version",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "nullable": false
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/jobs/": {
      "get": {
        "summary": "Query metadata for all jobs",
        "operationId": "listJobs",
        "tags": ["Jobs"],
        "parameters": [
          { "$ref": "#/components/parameters/PaginationLimit" },
          { "$ref": "#/components/parameters/PaginationOffset" },
          { "$ref": "#/components/parameters/Filter" },
          { "$ref": "#/components/parameters/Sort" }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "metadataworkspacelist.schema.json"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Submit a job for execution",
        "tags": ["Jobs"],
        "operationId": "submitJob",
        "requestBody": {
          "description": "The component to store",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "jobpostrequest.schema.json"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created/submitted job can be queried",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "job.schema.json"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "Location of the newly created component",
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "example": "/jobs/8aec4412-5049-4e14-97ee-cd007b2a0ad1"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/jobs/{id}/": {
      "get": {
        "summary": "Get a job",
        "operationId": "getJob",
        "tags": ["Jobs"],
        "parameters": [
          {
            "$ref": "cref.schema.json"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "job.schema.json"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Delete a job",
        "operationId": "deleteJob",
        "tags": ["Jobs"],
        "parameters": [
          {
            "$ref": "cref.schema.json"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "cref.schema.json"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "423": {
            "$ref": "#/components/responses/423"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/jobs/{id}/events": {
      "get": {
        "summary": "Get the job event stream",
        "operationId": "getJobStream",
        "tags": ["Jobs"],
        "parameters": [
          {
            "$ref": "cref.schema.json"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "TBD",
                  "additionalProperties": true
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/jobs/{id}/terminate": {
      "post": {
        "summary": "Terminate a job",
        "tags": ["Jobs"],
        "operationId": "terminateJob",
        "responses": {
          "202": {
            "description": "Job termination started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "cref.schema.json"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "default": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "if-none-match": {
        "schema": {
          "type": "string"
        },
        "description": "Version ETag of the most recent received version. Set to prevent unneeded fetching and redrawing. Returns *304 Not Modified* if the Etag matches the most recent version.",
        "name": "If-None-Match",
        "in": "header",
        "example": "5e51f6e0"
      },
      "objectId": {
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "description": "ID of the object to fetch",
        "name": "objectId",
        "in": "path",
        "required": true,
        "example": "d75bd658-0fa3-43a9-bb2f-0d2a554e97d0"
      },
      "PaginationOffset": {
        "in": "query",
        "name": "offset",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "description": "Offsets the list of returned items",
        "examples": {
          "offset": {
            "value": "20",
            "summary": "Skip the first 20 items"
          }
        }
      },
      "PaginationLimit": {
        "in": "query",
        "name": "limit",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 10
        },
        "description": "Limits the number of returned items",
        "examples": {
          "20": {
            "value": "20",
            "summary": "Only return 20 items"
          }
        }
      },
      "Filter": {
        "in": "query",
        "name": "filter",
        "schema": { "type": "string" },
        "description": "Filter the returned items. Operators: ==,!=,<,>,>=,<=,search.",
        "examples": {
          "email": {
            "value": "modifiedBy[==]=flow@equinor.com",
            "summary": "Select an exact email match"
          },
          "regexp": {
            "value": "modifiedBy[search]=\\w@equinor.com",
            "summary": "Select a regexp email match"
          },
          "dateFrom": {
            "value": "timestamp[>]=2022-02-22",
            "summary": "Select items newer than a specific date (in ISO)"
          }
        }
      },
      "Sort": {
        "in": "query",
        "name": "sort",
        "schema": { "type": "string" },
        "description": "Sort the returned items. Operators: +,- for ascending or descending.",
        "examples": {
          "timestamp": {
            "value": "+timestamp",
            "summary": "Sort ascending based on timestamp field"
          },
          "author": {
            "value": "-modifiedBy",
            "summary": "Sort descending based on author field"
          }
        }
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "description": "Server side error",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 400
          },
          "summary": {
            "type": "string",
            "description": "Short summary of the error",
            "example": "This action causes havoc!"
          },
          "detail": {
            "type": "string",
            "description": "A user-friendly description of how to solve the issue.",
            "example": "Field test.demo is not a valid RFC1123 string"
          }
        }
      }
    },
    "responses": {
      "201": {
        "description": "Created: Resource is created and can be queried."
      },
      "204": {
        "description": "No content, the request was enacted and no further information is to be supplied.",
        "content": {}
      },
      "400": {
        "description": "Bad request body",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "403": {
        "description": "Access denied",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "404": {
        "description": "Object Not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "409": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "423": {
        "description": "Locked",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}
